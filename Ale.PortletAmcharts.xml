<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (SUSE Linux Enterprise Server for x86-64) 2017.2 (Build 740)" ts="2017-11-29 20:39:25">
<Class name="Ale.PortletAmcharts">
<Super>%DeepSee.Component.Portlet.abstractPortlet</Super>
<TimeChanged>64616,74322.592329</TimeChanged>
<TimeCreated>64594,80930.104007</TimeCreated>

<Parameter name="INCLUDEFILES">
<Description>
Parameter INCLUDEFILES = "script:https://www.amcharts.com/lib/3/themes/light.js,script:https://www.amcharts.com/lib/3/amcharts.js,script:https://www.amcharts.com/lib/3/serial.js,script:https://www.amcharts.com/lib/3/plugins/export/export.min.js,script:https://www.amcharts.com/lib/3/plugins/export/export.js";</Description>
<Default>https://www.amcharts.com/lib/3/amcharts.js,https://www.amcharts.com/lib/3/serial.js,https://d3js.org/d3.v3.min.js,https://www.amcharts.com/lib/3/plugins/export/export.js,https://www.amcharts.com/lib/3/plugins/export/export.css</Default>
</Parameter>

<Parameter name="JSINCLUDES">
<Default>zenCSLM.js,DeepSee.js,https://www.amcharts.com/lib/3/plugins/export/export.js</Default>
</Parameter>

<Property name="chartheight">
<Description>
Chart height (percentage of widget)</Description>
<Type>%Integer</Type>
</Property>

<Property name="chartwidth">
<Description>
Chart width (percentage of widget)</Description>
<Type>%Integer</Type>
</Property>

<Property name="fillalphas">
<Description>
Area Transparency Setting</Description>
<Type>%Numeric</Type>
</Property>

<Property name="linecolor">
<Description>
Line color</Description>
<Type>%String</Type>
</Property>

<Property name="fillcolor">
<Description>
Chart color</Description>
<Type>%String</Type>
</Property>

<Property name="bullet">
<Description>
Bullet shape</Description>
<Type>%String</Type>
</Property>

<Property name="bulletsize">
<Description>
Bullet size</Description>
<Type>%Integer</Type>
</Property>

<Property name="amchartsexport">
<Description>
Enable Export of chart</Description>
<Type>%Boolean</Type>
</Property>

<Method name="%OnGetPortletName">
<Description>
Return the localized caption of this portlet.
This is displayed in the Widget Builder dialog.
This should be overridden in subclasses.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "PortletAmcharts"
]]></Implementation>
</Method>

<Method name="%OnGetPortletSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[*pInfo:%List,&pSettings]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Kill pInfo
 Set pInfo($I(pInfo)) = $LB("CHARTHEIGHT","100","%Integer","% Chart height","Chart height (percentage of widget)")
 Set pInfo($I(pInfo)) = $LB("CHARTWIDTH","100","%Integer","% Chart width","Chart width (percentage of widget)")
 Set pInfo($I(pInfo)) = $LB("FILLALPHAS","0.5","%Numeric","Area Transparency","Set the transparency of the area plot [0 to 1]")
 Set pInfo($I(pInfo)) = $LB("LINECOLOR","red","DRILL^Red:red,Black:black,Blue:blue,Purple:purple,Yellow:yellow,Green:green","Line Color","Line color")
 Set pInfo($I(pInfo)) = $LB("FILLCOLOR","red","DRILL^Red:red,Blue:blue,Purple:purple,Yellow:yellow,Green:green","Chart Color","Chart color")
 Set pInfo($I(pInfo)) = $LB("BULLET","red","DRILL^none:none,round:round,square:square,triangleUp:triangleUp,triangleDown:triangleDown,bubble:bubble","Bullet","Bullet shape")
 Set pInfo($I(pInfo)) = $LB("BULLETSIZE","6","%Integer","Bullet size","Size of bullet in the chart")
 Set pInfo($I(pInfo)) = $LB("AMEXPORT","false","ENUM^true:1,false:0","Enable Export","Enable Export")
 Quit pInfo
]]></Implementation>
</Method>

<Method name="onApplyFilters">
<Description>
When filters get applied to the portlet, re-query the data from the pivot with the appropriate new filters in place.</Description>
<FormalSpec>refresh,widget</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('onApplyFilters')
    //widget.applyFilters(false) //infinite loop with onApplyFilters, with both true and false
	var portlet = widget.findComponent('portlet');
   	this.renderContents(widget,portlet);
]]></Implementation>
</Method>

<Method name="%DrawHTML">
<Implementation><![CDATA[
  //In a portlet that accesses data do nothing but force a modification of the renderFlag property
  Set ..renderFlag = ..renderFlag + 1
  //Settings: they will be available in renderContent (and drawChart) as e.g. this.fillalphas
  Set ..fillalphas = ..settings("FILLALPHAS")
  Set ..amchartsexport = ..settings("AMEXPORT")
  Set ..chartheight = ..settings("CHARTHEIGHT")
  Set ..chartwidth = ..settings("CHARTWIDTH")
  Set ..fillcolor = ..settings("FILLCOLOR")
  Set ..bullet = ..settings("BULLET")
  Set ..bulletsize = ..settings("BULLETSIZE")
  //Show a message while loading
  &html< <div id="chartdiv">Content is loading...</div>	>
]]></Implementation>
</Method>

<Method name="renderContents">
<FormalSpec>widget,portlet</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('renderContents')
	//Get the widget and portlet objects
	var widgetIdArray = this.id.split("/")
	var widgetId = widgetIdArray[0]
	if (!widget) {
		widget = zen(widgetId);
	}
	if (!portlet) {
		portlet = widget.findComponent('portlet');
	}
	//Quit if the portlet object was not found. This happens during the initial server load
	//when renderContents gets called before it is time to load the data
	if (!portlet) {
		this.getEnclosingDiv().innerHTML = "";
		return true;
	}
	var portletId = portlet.id
    //Get the widget's data controller to get to the source data in the pivot
    var controller = this.getController();
    if (null == controller) {
        this.connectToController();
        controller = this.getController();
    }
	//Get the chartdiv div created in %DrawHTML
	var chartdiv = document.getElementById('chartdiv');
	chartdiv.style.width = this.chartwidth+'%';
    chartdiv.style.height = this.chartheight+'%';
    chartdiv.style.visibility = 'visible'
	//Get the query
	var query = controller.GetCurrentQueryText();
	console.log('The MDX query is:\n'+query)
    
    /*
    var i = 10
    var y = controller.getDataAsArrays()[i]
    var header_col = controller.getColumnDescriptors()[0].caption
    var header_row = controller.getRowCaptions()
	//var x = controller.data.axes[1]["tuples"] //the next is simpler
	var date = controller.getLabel(i,1)
	*/
    
    //test from browser p=zenPage.getComponentById("$widget_1/portlet"); controller=p.getController()
    var chartData = []
    var cols = controller.getDataAsArrays()[0]
    
    
    for (var i = 0; i < cols.length; ++i) {
	    var date = controller.getLabel(i,1);
	    chartData.push({
		    date: date,
		    y: cols[i]
		 }) };  
	 console.log(chartData)
	 this.drawChart(controller, chartData)
	 
    //Create the resultSet object

    //var contents = portlet.runMDXQuery(query,widgetId);

    //Method getContents(pPivot As %String, widgetId As %String) As %String [ ZenMethod ]
    //is called as 
    //var contents = portlet.getContents(query,widgetId); //Jon has pivot instead of query
    //var contents = portlet.runMDXQuery(query)
    //contents is a string, which I think is a json
    //which calls
    //ClassMethod runMDXQuery(pPivot As %ZEN.proxyObject, Output pResultsByRef As %DeepSee.ResultSet) As %Status [ Internal ]
    //as
    //$$$THROWONERROR(tSC,..runMDXQuery(tPivotObj, .tResults))
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*Method getContents(MDX As %String, widgetId As %String) As %String [ ZenMethod ]
{
	Do ..runMDXQuery(MDX, .tResults)
	//Do ..addResultSetToPivot(.tPivotObj, tResults))
	//addResultSetToPivot(pPivotByRef As %ZEN.proxyObject, pResults As %DeepSee.ResultSet) As %Status [ Internal ]
	//tResults As %ZEN.proxyObject = ##class(%ZEN.proxyObject).%New()
	Set tResults.axisCount =  pResults.%GetAxisCount()
	For i=1:1:tResults.axisCount {
		Set axissize(i)=pResults.%GetAxisSize(i)
    }
    Set tResults.axissize=axissize(1)
	..
	
	
	
	Quit tContents
}

/// runMDXQuery runs the DeepSee query and returns back a %DeepSee.ResultSet
ClassMethod runMDXQuery(MDX As %String, Output pResultsByRef As %DeepSee.ResultSet) As %Status
{
	Try {
	    Set pResultsByRef = ##class(%DeepSee.ResultSet).%New()
	    Set tSC = pResultsByRef.%PrepareMDX(MDX)
	    //Multi-process query execution but still synchronous
	    #; Note, this is a synchronous method which will only use one process to perform,
    	#; the recommended way is the asynch with wait til complete before continuing.
    	Set tSC = pResultsByRef.%ExecuteAsynch(MDX,,1)
    	//{date: "2017-11-27 00:05:00", y: 3}
 	} Catch(ex) {
    	Set tSC = ex.AsStatus()
    	//Write "Failed to Run MDX, Error: ",$System.Status.GetOneStatusText(tSC,1)
 	}
 	Quit tSC
}
*/
]]></Content>
</UDLText>

<Method name="drawChart">
<FormalSpec>resultSet,chartData</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	console.log('drawChart')
	/*var chartDataPoint;
	var chartLabel;
	var chartData = [];
	//Populate chartData needed for AmCharts from resultSet
	console.time('resultSet loop');
	for (var i = 1; i <= resultSet.getRowCount(); ++i) {
		for (var j = 1; j <= resultSet.getColumnCount(); ++j) {
			chartDataPoint = resultSet.getOrdinalValue(i,j);
			chartLabel = resultSet.getOrdinalLabel(2,i); //label of member on rows
			chartData[chartData.length] = { "date":chartLabel[0],"y":chartDataPoint};
		}
	}
	//If no data, get rid of data array containg empty/undefined values
	if ((resultSet.parsedData.Result.CellData.length == 1) && (resultSet.parsedData.Result.CellData[0]["ValueLogical"]=="")) {
		chartData=[];
	}
	console.timeEnd('resultSet loop');
	console.log(chartData)
	*/
	//var columnLabel = resultSet.getOrdinalLabel(1,1);
	var columnLabel = "hey"
	//AmChart code
	if (typeof AmCharts=="undefined")  {
		alert('Please download amCharts JavaScript Charts (http://www.amcharts.com/download/) and place the "amcharts" directory in /csp/broker/  ');
		return;
	}
	var chart = AmCharts.makeChart("chartdiv", {
		"type": "serial",
		"theme": "light",
		"marginRight": 80,
		"dataProvider": chartData,
		"valueAxes": [{
			"position": "left",
			"title": columnLabel,
			"minimum":0,
			"maximum":"undefined",
			"showFirstLabel": true,
			"autoGridCount": true,
			"labelFrequency": 2
		}],
		"graphs": [{
			"id": "g1",
			"lineThickness": 2,
			"bullet": this.bullet,
			"bulletSize": this.bulletsize,
			"lineColor": this.linecolor,
			"fillColors": this.fillcolor,
			"fillAlphas": this.fillalphas,
			"valueField": "y",
			"balloonText": "<div style='margin:5px; font-size:19px;'>"+columnLabel+": <b>[[value]]</b></div>"
		}],
		"chartScrollbar": {
			"graph": "g1",
			"scrollbarHeight": 30,
			"backgroundAlpha": 0,
			"selectedBackgroundAlpha": 0.1,
			"selectedBackgroundColor": "#888888", //Gray background
			"graphFillAlpha": 0,
			"graphLineAlpha": 0.5,
			"selectedGraphFillAlpha": 0,
			"selectedGraphLineAlpha": 1,
			"autoGridCount": true,
			"color": "#AAAAAA"
		},
		"chartCursor": {
			"categoryBalloonDateFormat": "JJ:NN, DD MMMM", //Hours:Minute, Day Month
			"cursorPosition": "mouse"
		},
		"categoryField": "date",
		"categoryAxis": {
			"minPeriod": "mm",
			"parseDates": true,
			"showFirstLabel": false
		},
		"export": {
			"enabled": this.amchartsexport,
			"dateFormat": "YYYY-MM-DD HH:NN:SS"
		}
	});
	/*
	chart.addListener("dataUpdated", zoomChart);
	// when we apply theme, the dataUpdated event is fired even before we add listener, so
	// we need to call zoomChart here
	zoomChart();
	// this method is called when chart is first inited as we listen for "dataUpdated" event
	function zoomChart() {
		// different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues
		chart.zoomToIndexes(chartData.length - 250, chartData.length - 100);
	}
	*/
	if (chart.dataProvider === undefined || chart.dataProvider.length === 0) {
		chart.addLabel("50%", "50%", "The chart contains no data", "middle", 15);
	}
]]></Implementation>
</Method>

<Method name="%OnGetPortletIcon">
<Description>
URL of the icon for this portlet displayed in the Widget Builder dialog.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "https://avatars1.githubusercontent.com/u/6652854?s=460&v=4"
]]></Implementation>
</Method>
</Class>
</Export>
